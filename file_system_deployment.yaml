---
- name: Commvault Ansible
  gather_facts: no
  hosts: localhost
  connection: local

  vars:
    webconsole_hostname: 'webconsole_hostname'
    commcell_username: 'commcell_username'
    commcell_password: 'commcell_password'

  tasks:
    - name: Commvault commcell initialization
      block:
        - name: Login
          commvault:
            operation: LOGIN
            entity: {
            webconsole_hostname: "{{ webconsole_hostname }}",
            commcell_username: "{{ commcell_username }}",
            commcell_password: "{{ commcell_password }}"
            }
          register: commcell
        - debug:
            msg: "Login is done successfully"
      rescue:
        - debug:
            msg: 'Login failed'


    # Either Unix or Windows clients_computers should be chosen and not both
    # windows packages - https://github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/deployment/deploymentconstants.py#L79
    # Unix packages - https://github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/deployment/deploymentconstants.py#L59
    # Install software method is available on commcell.py module in cvpysdk - https://github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/commcell.py#L1684
    - name: Windows FS package installation
      commvault:
        operation: install_software
        entity_type: commcell
        commcell: "{{ commcell }}"
        args: {
            client_computers: ["client_name"],
            windows_features: [702],  # 702 is File System
            username: "username",
            password: "password"
        }

      register: install_job

    - debug:
        msg: "Successfully started install job: {{ install_job.output }}"

    - name: wait for install job to complete
      when: install_job is succeeded
      commvault:
        operation: "wait_for_completion"
        entity_type: "job"
        commcell: "{{ commcell }}"
        entity: {
        job_id: "{{ install_job.output }}"
        }
      register: status

    - name: install job failure reason
      when: status.output == false
      commvault:
        operation: "delay_reason"
        entity_type: "job"
        commcell: "{{ commcell }}"
        entity: {
        job_id: "{{ install_job.output }}"
        }
      register: failure_reason

    - debug:
        msg: "{{ failure_reason.output }}"
      when: status.output == false
      ignore_errors: yes

    - debug:
        msg: "{{ install job completed successfully }}"
      when: status.output == true
      ignore_errors: yes

...