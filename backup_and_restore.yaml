---
- name: Commvault Ansible
  gather_facts: no
  hosts: localhost
  connection: local

  vars:
    webconsole_hostname: 'hostname'
    commcell_username: 'username'
    commcell_password: 'password'
    client: 'sample client'

  tasks:
    - name: Commvault commcell initialization
      block:
        - name: Login
          commvault:
            operation: LOGIN
            entity: {
            webconsole_hostname: "{{ webconsole_hostname }}",
            commcell_username: "{{ commcell_username }}",
            commcell_password: "{{ commcell_password }}"
            }
          register: commcell
        - debug:
            msg: "Login is done successfully"
      rescue:
        - debug:
            msg: 'Login failed'

    - name: Backup
      block:
        - name: performing backup
          commvault:
            operation: "backup"
            entity_type: subclient
            commcell: "{{ commcell }}"
            entity: {
            client: "{{ client }}",
            agent: "file system",
            backupset: "defaultbackupset",
            subclient: "default"
            }
          register: backup_job
        - debug:
            msg: "Successfully started backup job: {{ backup_job.output }}"
        - name: wait for backup job to complete
          commvault:
            operation: "wait_for_completion"
            entity_type: "job"
            commcell: "{{ commcell }}"
            entity: {
            job_id: "{{ backup_job.output }}"
            }
          register: backup_status
        - name: Backup job failure reason
          when: backup_status.output == false
          commvault:
            operation: "delay_reason"
            entity_type: "job"
            commcell: "{{ commcell }}"
            entity: {
            job_id: "{{ backup_job.output }}"
            }
          register: failure_reason
        - debug:
            msg: "{{ failure_reason.output }}"
          when: backup_status.output == false
          ignore_errors: yes
        - debug:
            msg: "Backup job completed successfully"
          when: backup_status.output == true
          ignore_errors: yes
      rescue:
        - debug:
            msg: 'Backup failed'

    - name: Restore
      when: backup_status.output == true
      commvault:
        operation: "restore_in_place"
        entity_type: subclient
        commcell: "{{ commcell }}"
        entity: {
        client: "{{ client }}",
        agent: "file system",
        backupset: "defaultbackupset",
        subclient: "default"
        }
        args: {
        paths: ['C:\testing']
        }
      register: restore_job

    - debug:
        msg: "Successfully started Restore job: {{ restore_job.output }}"

    - name: wait for restore job to complete
      when: restore_job is succeeded
      commvault:
        operation: "wait_for_completion"
        entity_type: "job"
        commcell: "{{ commcell }}"
        entity: {
        job_id: "{{ restore_job.output }}"
        }
      register: restore_status

    - name: Backup job failure reason
      when: restore_status.output == false
      commvault:
        operation: "delay_reason"
        entity_type: "job"
        commcell: "{{ commcell }}"
        entity: {
        job_id: "{{ restore_job.output }}"
        }
      register: failure_reason

    - debug:
        msg: "{{ failure_reason.output }}"
      when: restore_status.output == false
      ignore_errors: yes

    - debug:
        msg: "{{ Restore job completed successfully }}"
      when: restore_status.output == true
      ignore_errors: yes

...